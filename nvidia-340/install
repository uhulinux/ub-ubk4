#!/bin/bash -eux

KVER="$(ls -1 /lib/modules | grep x86_64)"
#célkönyvtárak
moduldir="$UB_INSTALLDIR"/lib/modules/"$KVER"/kernel/drivers/video
cellibdir="$UB_INSTALLDIR"/usr/lib
xmoduldir="$cellibdir"/xorg/modules
desktopdir="$UB_INSTALLDIR"/usr/share/applications
mandir="$UB_INSTALLDIR"/usr/share/man/man1/
vendordir="$UB_INSTALLDIR"/etc/OpenCL/vendors
pixmapdir="$UB_INSTALLDIR"/usr/share/pixmaps/
shnvdir="$UB_INSTALLDIR"/usr/share/nvidia
vdpaudir=$cellibdir/vdpau

#könyvtárgyártás
mkdir -p "$cellibdir"/nvidia \
	"$moduldir" \
	"$xmoduldir"/{drivers,extensions} \
	"$desktopdir" \
	"$mandir" \
	"$vendordir" \
	"$pixmapdir" \
	"$shnvdir" \
	"$vdpaudir"

cd nvsett
export NV_USE_BUNDLED_LIBJANSSON=0
export PREFIX=/usr
ub_install

# desktop
mv	doc/nvidia-settings.desktop "$desktopdir"/
mv	doc/nvidia-settings.png "$pixmapdir"/
gunzip	$mandir/nvidia-settings.1.gz
cd ..

#kernelmodulok
cp kernel/{nvidia.ko,uvm/nvidia-uvm.ko} "$moduldir"/

# binárisok patchelf +elhelyezés
binaries='
    nvidia-xconfig
	nvidia-smi
	nvidia-modprobe
	nvidia-debugdump
	nvidia-persistenced
	nvidia-cuda-mps-server
	nvidia-cuda-mps-control
'
for binary in $binaries;do
    patchelf --set-interpreter /usr/lib/ld-linux-x86-64.so.2 $binary
    mv $binary "$UB_INSTALLDIR"/usr/bin/
done

# man
gunzip	*.1.gz
rm -f nvidia-installer.1
mv	*.1 "$mandir"/

# vendor
mv	nvidia.icd "$vendordir"/

# biztonságba helyezés a régi módon
mv	libglx.so."$UB_VERSION" "$cellibdir"/nvidia/

#Áthelyezzük a nem a $cellibdir alá kerülő *.so-kat
mv	nvidia_drv.so "$xmoduldir"/drivers/
mv	tls "$cellibdir"

# vdpau cuccok
mv libvdpau_nvidia.so.${UB_VERSION} $vdpaudir

#### Error: Nincs meg ez a lib: libGL.so (igényli: /usr/lib/libnvidia-ifr.so.319.60)
# Az igényelt libGL.so szimlink ütközne a mesa-dev -el,
# a mesa-dev függés viszont felrántana egy rakás dev -et,
# ezért lemondunk az NvIFROpenGL library használatáról egyelőre
#rm -f libnvidia-ifr.so."$UB_VERSION"
#### Error: Nincs meg ez a lib: libGL.so.1 (igényli: /usr/lib/libnvidia-fbc.so.340.17)
#rm -f libnvidia-fbc.so."$UB_VERSION"

# minden áthelyezése a libekbe
mv *.so.* "$cellibdir"/

# application profiles
cp nvidia-application-profiles-${UB_VERSION}-rc $shnvdir/
cp nvidia-application-profiles-${UB_VERSION}-key-documentation $shnvdir/

#libxnvctrl

cd nvsett/src/libXNVCtrl
mkdir -p "${UB_INSTALLDIR}"/usr/{include/NVCtrl,lib/pkgconfig}
cp nv_control.h NVCtrl{,Lib}.h "${UB_INSTALLDIR}"/usr/include/NVCtrl/
cp libXNVCtrl.a "${cellibdir}"/

# pc rendberakás
cat <<'EOF' > "${UB_INSTALLDIR}"/usr/lib/pkgconfig/libXNVCtrl.pc
prefix=/usr
libdir=${prefix}/lib
includedir=${prefix}/include/NVCtrl

Name: libXNVCtrl
Description: Library for accessing NV-CONTROL extension in NVIDIA's kurrent drivers.
Version: %version%
Libs: -L${libdir} -lXNVCtrl
Cflags: -I${includedir}
EOF

sed -i -e "s/%version%/$UB_VERSION/" "${UB_INSTALLDIR}"/usr/lib/pkgconfig/libXNVCtrl.pc

#linkgyártások
cd "$cellibdir"
ln -s libwfb.so xorg/modules/libnvidia-wfb.so."$UB_VERSION"
ln -s "libcuda.so.$UB_VERSION" libcuda.so

for i in `ls -1 libnv*`;do
lib=$(echo $i | sed s/\.${UB_VERSION}//g)
solink=$(echo $lib | sed s/so\..*/so/)
ln -s $i $lib.1
ln -s $lib.1 $solink
done

cd $vdpaudir
for i in `ls -1 libvdpau*`;do
lib=$(echo $i | sed s/\.${UB_VERSION}//g)
solink=$(echo $lib | sed s/so\..*/so/)
ln -s $i $lib.1
ln -s $lib.1 $solink
done

# Támogatott chepkhez a verzió beillesztése a csomag leírásába
sed "s/version/${UB_VERSION}/g" -i ${UB_SRCDIR}/packages/nvidia-340/description/hu
