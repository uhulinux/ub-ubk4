diff -Naur a/src/amd/llvm/ac_llvm_helper.cpp b/src/amd/llvm/ac_llvm_helper.cpp
--- a/src/amd/llvm/ac_llvm_helper.cpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/amd/llvm/ac_llvm_helper.cpp	2024-01-07 20:05:55.257736366 +0100
@@ -31,6 +31,15 @@
 #include <llvm/MC/MCSubtargetInfo.h>
 #include <llvm/Support/CommandLine.h>
 #include <llvm/Transforms/IPO.h>
+#include <llvm/Transforms/Scalar.h>
+#include <llvm/Transforms/Utils.h>
+#include <llvm/CodeGen/Passes.h>
+#include <llvm/Transforms/IPO/AlwaysInliner.h>
+#include <llvm/Transforms/InstCombine/InstCombine.h>
+#include <llvm/Transforms/IPO/SCCP.h>
+#if LLVM_VERSION_MAJOR >= 15
+#include "llvm/CodeGen/SelectionDAGNodes.h"
+#endif
 
 #include <cstring>
 
@@ -45,44 +54,77 @@
 #include "ac_llvm_build.h"
 #include "util/macros.h"
 
+using namespace llvm;
+
+#if LLVM_VERSION_MAJOR >= 15
+class RunAtExitForStaticDestructors : public SDNode
+{
+public:
+   /* getSDVTList (protected) calls getValueTypeList (private), which contains static variables. */
+   RunAtExitForStaticDestructors(): SDNode(0, 0, DebugLoc(), getSDVTList(MVT::Other))
+   {
+   }
+};
+#endif
+
+void ac_llvm_run_atexit_for_destructors(void)
+{
+#if LLVM_VERSION_MAJOR >= 15
+   /* LLVM >= 16 registers static variable destructors on the first compile, which gcc
+    * implements by calling atexit there. Before that, u_queue registers its atexit
+    * handler to kill all threads. Since exit() runs atexit handlers in the reverse order,
+    * the LLVM destructors are called first while shader compiler threads may still be
+    * running, which crashes in LLVM in SelectionDAG.cpp.
+    *
+    * The solution is to run the code that declares the LLVM static variables first,
+    * so that atexit for LLVM is registered first and u_queue is registered after that,
+    * which ensures that all u_queue threads are terminated before LLVM destructors are
+    * called.
+    *
+    * This just executes the code that declares static variables.
+    */
+   RunAtExitForStaticDestructors();
+#endif
+}
+
 bool ac_is_llvm_processor_supported(LLVMTargetMachineRef tm, const char *processor)
 {
-   llvm::TargetMachine *TM = reinterpret_cast<llvm::TargetMachine *>(tm);
+   TargetMachine *TM = reinterpret_cast<TargetMachine *>(tm);
    return TM->getMCSubtargetInfo()->isCPUStringValid(processor);
 }
 
 void ac_reset_llvm_all_options_occurences()
 {
-   llvm::cl::ResetAllOptionOccurrences();
+   cl::ResetAllOptionOccurrences();
 }
 
 void ac_add_attr_dereferenceable(LLVMValueRef val, uint64_t bytes)
 {
-   llvm::Argument *A = llvm::unwrap<llvm::Argument>(val);
-   A->addAttr(llvm::Attribute::getWithDereferenceableBytes(A->getContext(), bytes));
+   Argument *A = unwrap<Argument>(val);
+   A->addAttr(Attribute::getWithDereferenceableBytes(A->getContext(), bytes));
 }
 
 void ac_add_attr_alignment(LLVMValueRef val, uint64_t bytes)
 {
-   llvm::Argument *A = llvm::unwrap<llvm::Argument>(val);
-   A->addAttr(llvm::Attribute::getWithAlignment(A->getContext(), llvm::Align(bytes)));
+   Argument *A = unwrap<Argument>(val);
+   A->addAttr(Attribute::getWithAlignment(A->getContext(), Align(bytes)));
 }
 
 bool ac_is_sgpr_param(LLVMValueRef arg)
 {
-   llvm::Argument *A = llvm::unwrap<llvm::Argument>(arg);
-   llvm::AttributeList AS = A->getParent()->getAttributes();
+   Argument *A = unwrap<Argument>(arg);
+   AttributeList AS = A->getParent()->getAttributes();
    unsigned ArgNo = A->getArgNo();
-   return AS.hasParamAttr(ArgNo, llvm::Attribute::InReg);
+   return AS.hasParamAttr(ArgNo, Attribute::InReg);
 }
 
 LLVMModuleRef ac_create_module(LLVMTargetMachineRef tm, LLVMContextRef ctx)
 {
-   llvm::TargetMachine *TM = reinterpret_cast<llvm::TargetMachine *>(tm);
+   TargetMachine *TM = reinterpret_cast<TargetMachine *>(tm);
    LLVMModuleRef module = LLVMModuleCreateWithNameInContext("mesa-shader", ctx);
 
-   llvm::unwrap(module)->setTargetTriple(TM->getTargetTriple().getTriple());
-   llvm::unwrap(module)->setDataLayout(TM->createDataLayout());
+   unwrap(module)->setTargetTriple(TM->getTargetTriple().getTriple());
+   unwrap(module)->setDataLayout(TM->createDataLayout());
    return module;
 }
 
@@ -90,7 +132,7 @@
 {
    LLVMBuilderRef builder = LLVMCreateBuilderInContext(ctx);
 
-   llvm::FastMathFlags flags;
+   FastMathFlags flags;
 
    switch (float_mode) {
    case AC_FLOAT_MODE_DEFAULT:
@@ -108,7 +150,7 @@
        */
       flags.setAllowReciprocal(); /* arcp */
 
-      llvm::unwrap(builder)->setFastMathFlags(flags);
+      unwrap(builder)->setFastMathFlags(flags);
       break;
    }
 
@@ -118,8 +160,8 @@
 void ac_enable_signed_zeros(struct ac_llvm_context *ctx)
 {
    if (ctx->float_mode == AC_FLOAT_MODE_DEFAULT_OPENGL) {
-      auto *b = llvm::unwrap(ctx->builder);
-      llvm::FastMathFlags flags = b->getFastMathFlags();
+      auto *b = unwrap(ctx->builder);
+      FastMathFlags flags = b->getFastMathFlags();
 
       /* This disables the optimization of (x + 0), which is used
        * to convert negative zero to positive zero.
@@ -132,8 +174,8 @@
 void ac_disable_signed_zeros(struct ac_llvm_context *ctx)
 {
    if (ctx->float_mode == AC_FLOAT_MODE_DEFAULT_OPENGL) {
-      auto *b = llvm::unwrap(ctx->builder);
-      llvm::FastMathFlags flags = b->getFastMathFlags();
+      auto *b = unwrap(ctx->builder);
+      FastMathFlags flags = b->getFastMathFlags();
 
       flags.setNoSignedZeros();
       b->setFastMathFlags(flags);
@@ -143,17 +185,17 @@
 LLVMTargetLibraryInfoRef ac_create_target_library_info(const char *triple)
 {
    return reinterpret_cast<LLVMTargetLibraryInfoRef>(
-      new llvm::TargetLibraryInfoImpl(llvm::Triple(triple)));
+      new TargetLibraryInfoImpl(Triple(triple)));
 }
 
 void ac_dispose_target_library_info(LLVMTargetLibraryInfoRef library_info)
 {
-   delete reinterpret_cast<llvm::TargetLibraryInfoImpl *>(library_info);
+   delete reinterpret_cast<TargetLibraryInfoImpl *>(library_info);
 }
 
 /* Implementation of raw_pwrite_stream that works on malloc()ed memory for
  * better compatibility with C code. */
-struct raw_memory_ostream : public llvm::raw_pwrite_stream {
+struct raw_memory_ostream : public raw_pwrite_stream {
    char *buffer;
    size_t written;
    size_t bufsize;
@@ -220,7 +262,7 @@
  */
 struct ac_compiler_passes {
    raw_memory_ostream ostream;        /* ELF shader binary stream */
-   llvm::legacy::PassManager passmgr; /* list of passes */
+   legacy::PassManager passmgr; /* list of passes */
 };
 
 struct ac_compiler_passes *ac_create_llvm_passes(LLVMTargetMachineRef tm)
@@ -229,10 +271,10 @@
    if (!p)
       return NULL;
 
-   llvm::TargetMachine *TM = reinterpret_cast<llvm::TargetMachine *>(tm);
+   TargetMachine *TM = reinterpret_cast<TargetMachine *>(tm);
 
    if (TM->addPassesToEmitFile(p->passmgr, p->ostream, nullptr,
-                               llvm::CGFT_ObjectFile)) {
+                               CGFT_ObjectFile)) {
       fprintf(stderr, "amd: TargetMachine can't emit a file of this type!\n");
       delete p;
       return NULL;
@@ -249,80 +291,117 @@
 bool ac_compile_module_to_elf(struct ac_compiler_passes *p, LLVMModuleRef module,
                               char **pelf_buffer, size_t *pelf_size)
 {
-   p->passmgr.run(*llvm::unwrap(module));
+   p->passmgr.run(*unwrap(module));
    p->ostream.take(*pelf_buffer, *pelf_size);
    return true;
 }
 
-void ac_llvm_add_barrier_noop_pass(LLVMPassManagerRef passmgr)
+LLVMPassManagerRef ac_create_passmgr(LLVMTargetLibraryInfoRef target_library_info,
+                                     bool check_ir)
 {
-   llvm::unwrap(passmgr)->add(llvm::createBarrierNoopPass());
+   LLVMPassManagerRef passmgr = LLVMCreatePassManager();
+   if (!passmgr)
+      return NULL;
+
+   if (target_library_info)
+      LLVMAddTargetLibraryInfo(target_library_info, passmgr);
+
+   if (check_ir)
+      unwrap(passmgr)->add(createMachineVerifierPass("mesa ir"));
+
+   unwrap(passmgr)->add(createAlwaysInlinerLegacyPass());
+
+   /* Normally, the pass manager runs all passes on one function before
+    * moving onto another. Adding a barrier no-op pass forces the pass
+    * manager to run the inliner on all functions first, which makes sure
+    * that the following passes are only run on the remaining non-inline
+    * function, so it removes useless work done on dead inline functions.
+    */
+   unwrap(passmgr)->add(createBarrierNoopPass());
+
+   /* This pass eliminates all loads and stores on alloca'd pointers. */
+   unwrap(passmgr)->add(createPromoteMemoryToRegisterPass());
+   #if LLVM_VERSION_MAJOR >= 16
+   unwrap(passmgr)->add(createSROAPass(true));
+   #else
+   unwrap(passmgr)->add(createSROAPass());
+   #endif
+   /* TODO: restore IPSCCP */
+   if (LLVM_VERSION_MAJOR >= 16)
+      unwrap(passmgr)->add(createLoopSinkPass());
+   /* TODO: restore IPSCCP */
+   unwrap(passmgr)->add(createLICMPass());
+   unwrap(passmgr)->add(createCFGSimplificationPass());
+   /* This is recommended by the instruction combining pass. */
+   unwrap(passmgr)->add(createEarlyCSEPass(true));
+   unwrap(passmgr)->add(createInstructionCombiningPass());
+   return passmgr;
 }
 
 LLVMValueRef ac_build_atomic_rmw(struct ac_llvm_context *ctx, LLVMAtomicRMWBinOp op,
                                  LLVMValueRef ptr, LLVMValueRef val, const char *sync_scope)
 {
-   llvm::AtomicRMWInst::BinOp binop;
+   AtomicRMWInst::BinOp binop;
    switch (op) {
    case LLVMAtomicRMWBinOpXchg:
-      binop = llvm::AtomicRMWInst::Xchg;
+      binop = AtomicRMWInst::Xchg;
       break;
    case LLVMAtomicRMWBinOpAdd:
-      binop = llvm::AtomicRMWInst::Add;
+      binop = AtomicRMWInst::Add;
       break;
    case LLVMAtomicRMWBinOpSub:
-      binop = llvm::AtomicRMWInst::Sub;
+      binop = AtomicRMWInst::Sub;
       break;
    case LLVMAtomicRMWBinOpAnd:
-      binop = llvm::AtomicRMWInst::And;
+      binop = AtomicRMWInst::And;
       break;
    case LLVMAtomicRMWBinOpNand:
-      binop = llvm::AtomicRMWInst::Nand;
+      binop = AtomicRMWInst::Nand;
       break;
    case LLVMAtomicRMWBinOpOr:
-      binop = llvm::AtomicRMWInst::Or;
+      binop = AtomicRMWInst::Or;
       break;
    case LLVMAtomicRMWBinOpXor:
-      binop = llvm::AtomicRMWInst::Xor;
+      binop = AtomicRMWInst::Xor;
       break;
    case LLVMAtomicRMWBinOpMax:
-      binop = llvm::AtomicRMWInst::Max;
+      binop = AtomicRMWInst::Max;
       break;
    case LLVMAtomicRMWBinOpMin:
-      binop = llvm::AtomicRMWInst::Min;
+      binop = AtomicRMWInst::Min;
       break;
    case LLVMAtomicRMWBinOpUMax:
-      binop = llvm::AtomicRMWInst::UMax;
+      binop = AtomicRMWInst::UMax;
       break;
    case LLVMAtomicRMWBinOpUMin:
-      binop = llvm::AtomicRMWInst::UMin;
+      binop = AtomicRMWInst::UMin;
       break;
    case LLVMAtomicRMWBinOpFAdd:
-      binop = llvm::AtomicRMWInst::FAdd;
+      binop = AtomicRMWInst::FAdd;
       break;
    default:
       unreachable("invalid LLVMAtomicRMWBinOp");
       break;
    }
-   unsigned SSID = llvm::unwrap(ctx->context)->getOrInsertSyncScopeID(sync_scope);
-   return llvm::wrap(llvm::unwrap(ctx->builder)
-                        ->CreateAtomicRMW(binop, llvm::unwrap(ptr), llvm::unwrap(val),
+   unsigned SSID = unwrap(ctx->context)->getOrInsertSyncScopeID(sync_scope);
+   return wrap(unwrap(ctx->builder)
+                        ->CreateAtomicRMW(binop, unwrap(ptr), unwrap(val),
 #if LLVM_VERSION_MAJOR >= 13
-                                          llvm::MaybeAlign(0),
+                                          MaybeAlign(0),
 #endif
-                                          llvm::AtomicOrdering::SequentiallyConsistent, SSID));
+                                          AtomicOrdering::SequentiallyConsistent, SSID));
 }
 
 LLVMValueRef ac_build_atomic_cmp_xchg(struct ac_llvm_context *ctx, LLVMValueRef ptr,
                                       LLVMValueRef cmp, LLVMValueRef val, const char *sync_scope)
 {
-   unsigned SSID = llvm::unwrap(ctx->context)->getOrInsertSyncScopeID(sync_scope);
-   return llvm::wrap(llvm::unwrap(ctx->builder)
-                        ->CreateAtomicCmpXchg(llvm::unwrap(ptr), llvm::unwrap(cmp),
-                                              llvm::unwrap(val),
+   unsigned SSID = unwrap(ctx->context)->getOrInsertSyncScopeID(sync_scope);
+   return wrap(unwrap(ctx->builder)
+                        ->CreateAtomicCmpXchg(unwrap(ptr), unwrap(cmp),
+                                              unwrap(val),
 #if LLVM_VERSION_MAJOR >= 13
-                                              llvm::MaybeAlign(0),
+                                              MaybeAlign(0),
 #endif
-                                              llvm::AtomicOrdering::SequentiallyConsistent,
-                                              llvm::AtomicOrdering::SequentiallyConsistent, SSID));
+                                              AtomicOrdering::SequentiallyConsistent,
+                                              AtomicOrdering::SequentiallyConsistent, SSID));
 }
diff -Naur a/src/amd/llvm/ac_llvm_util.c b/src/amd/llvm/ac_llvm_util.c
--- a/src/amd/llvm/ac_llvm_util.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/amd/llvm/ac_llvm_util.c	2024-01-07 19:56:54.403530219 +0100
@@ -31,9 +31,6 @@
 #include "util/u_math.h"
 #include <llvm-c/Core.h>
 #include <llvm-c/Support.h>
-#include <llvm-c/Transforms/IPO.h>
-#include <llvm-c/Transforms/Scalar.h>
-#include <llvm-c/Transforms/Utils.h>
 
 #include <assert.h>
 #include <stdio.h>
@@ -216,38 +213,6 @@
    return tm;
 }
 
-static LLVMPassManagerRef ac_create_passmgr(LLVMTargetLibraryInfoRef target_library_info,
-                                            bool check_ir)
-{
-   LLVMPassManagerRef passmgr = LLVMCreatePassManager();
-   if (!passmgr)
-      return NULL;
-
-   if (target_library_info)
-      LLVMAddTargetLibraryInfo(target_library_info, passmgr);
-
-   if (check_ir)
-      LLVMAddVerifierPass(passmgr);
-   LLVMAddAlwaysInlinerPass(passmgr);
-   /* Normally, the pass manager runs all passes on one function before
-    * moving onto another. Adding a barrier no-op pass forces the pass
-    * manager to run the inliner on all functions first, which makes sure
-    * that the following passes are only run on the remaining non-inline
-    * function, so it removes useless work done on dead inline functions.
-    */
-   ac_llvm_add_barrier_noop_pass(passmgr);
-   /* This pass should eliminate all the load and store instructions. */
-   LLVMAddPromoteMemoryToRegisterPass(passmgr);
-   LLVMAddScalarReplAggregatesPass(passmgr);
-   LLVMAddLICMPass(passmgr);
-   LLVMAddAggressiveDCEPass(passmgr);
-   LLVMAddCFGSimplificationPass(passmgr);
-   /* This is recommended by the instruction combining pass. */
-   LLVMAddEarlyCSEMemSSAPass(passmgr);
-   LLVMAddInstructionCombiningPass(passmgr);
-   return passmgr;
-}
-
 static const char *attr_to_str(enum ac_func_attr attr)
 {
    switch (attr) {
diff -Naur a/src/amd/llvm/ac_llvm_util.h b/src/amd/llvm/ac_llvm_util.h
--- a/src/amd/llvm/ac_llvm_util.h	2023-01-11 18:46:41.000000000 +0100
+++ b/src/amd/llvm/ac_llvm_util.h	2024-01-07 19:58:17.907895226 +0100
@@ -129,7 +129,8 @@
 void ac_destroy_llvm_passes(struct ac_compiler_passes *p);
 bool ac_compile_module_to_elf(struct ac_compiler_passes *p, LLVMModuleRef module,
                               char **pelf_buffer, size_t *pelf_size);
-void ac_llvm_add_barrier_noop_pass(LLVMPassManagerRef passmgr);
+LLVMPassManagerRef ac_create_passmgr(LLVMTargetLibraryInfoRef target_library_info,
+                                     bool check_ir);
 
 static inline bool ac_has_vec3_support(enum amd_gfx_level chip, bool use_format)
 {
diff -Naur a/src/gallium/auxiliary/draw/draw_llvm.c b/src/gallium/auxiliary/draw/draw_llvm.c
--- a/src/gallium/auxiliary/draw/draw_llvm.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/auxiliary/draw/draw_llvm.c	2024-01-07 21:05:23.855129283 +0100
@@ -784,7 +784,7 @@
    if (!llvm->context) {
       llvm->context = LLVMContextCreate();
 
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
       LLVMContextSetOpaquePointers(llvm->context, false);
 #endif
 
diff -Naur a/src/gallium/auxiliary/gallivm/lp_bld_init.c b/src/gallium/auxiliary/gallivm/lp_bld_init.c
--- a/src/gallium/auxiliary/gallivm/lp_bld_init.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/auxiliary/gallivm/lp_bld_init.c	2024-01-07 20:46:01.267061110 +0100
@@ -42,15 +42,15 @@
 
 #include <llvm/Config/llvm-config.h>
 #include <llvm-c/Analysis.h>
-#include <llvm-c/Transforms/Scalar.h>
-#if LLVM_VERSION_MAJOR >= 7
-#include <llvm-c/Transforms/Utils.h>
-#endif
 #include <llvm-c/BitWriter.h>
 #if GALLIVM_USE_NEW_PASS == 1
 #include <llvm-c/Transforms/PassBuilder.h>
 #elif GALLIVM_HAVE_CORO == 1
-#if LLVM_VERSION_MAJOR <= 8 && (defined(PIPE_ARCH_AARCH64) || defined (PIPE_ARCH_ARM) || defined(PIPE_ARCH_S390) || defined(PIPE_ARCH_MIPS64))
+#include <llvm-c/Transforms/Scalar.h>
+#if LLVM_VERSION_MAJOR >= 7
+#include <llvm-c/Transforms/Utils.h>
+#endif
+#if LLVM_VERSION_MAJOR <= 8 && (DETECT_ARCH_AARCH64 || DETECT_ARCH_ARM || DETECT_ARCH_S390 || DETECT_ARCH_MIPS64)
 #include <llvm-c/Transforms/IPO.h>
 #endif
 #include <llvm-c/Transforms/Coroutines.h>
diff -Naur a/src/gallium/auxiliary/gallivm/lp_bld_misc.cpp b/src/gallium/auxiliary/gallivm/lp_bld_misc.cpp
--- a/src/gallium/auxiliary/gallivm/lp_bld_misc.cpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/auxiliary/gallivm/lp_bld_misc.cpp	2024-01-07 21:07:24.563551590 +0100
@@ -56,18 +56,25 @@
 #include <llvm-c/ExecutionEngine.h>
 #include <llvm/Target/TargetOptions.h>
 #include <llvm/ExecutionEngine/ExecutionEngine.h>
-#include <llvm/ADT/Triple.h>
 #include <llvm/Analysis/TargetLibraryInfo.h>
 #include <llvm/ExecutionEngine/SectionMemoryManager.h>
 #include <llvm/Support/CommandLine.h>
-#include <llvm/Support/Host.h>
 #include <llvm/Support/PrettyStackTrace.h>
 #include <llvm/ExecutionEngine/ObjectCache.h>
 #include <llvm/Support/TargetSelect.h>
+#include <llvm/CodeGen/SelectionDAGNodes.h>
 #if LLVM_VERSION_MAJOR >= 15
 #include <llvm/Support/MemoryBuffer.h>
 #endif
 
+#if LLVM_VERSION_MAJOR >= 17
+#include <llvm/TargetParser/Host.h>
+#include <llvm/TargetParser/Triple.h>
+#else
+#include <llvm/Support/Host.h>
+#include <llvm/ADT/Triple.h>
+#endif
+
 #if LLVM_VERSION_MAJOR < 11
 #include <llvm/IR/CallSite.h>
 #endif
diff -Naur a/src/gallium/drivers/llvmpipe/lp_context.c b/src/gallium/drivers/llvmpipe/lp_context.c
--- a/src/gallium/drivers/llvmpipe/lp_context.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_context.c	2024-01-07 21:05:23.855129283 +0100
@@ -263,7 +263,7 @@
    if (!llvmpipe->context)
       goto fail;
 
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(llvmpipe->context, false);
 #endif
 
diff -Naur a/src/gallium/drivers/llvmpipe/lp_test_arit.c b/src/gallium/drivers/llvmpipe/lp_test_arit.c
--- a/src/gallium/drivers/llvmpipe/lp_test_arit.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_test_arit.c	2024-01-07 21:05:23.855129283 +0100
@@ -434,7 +434,7 @@
    }
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module", context, NULL);
diff -Naur a/src/gallium/drivers/llvmpipe/lp_test_blend.c b/src/gallium/drivers/llvmpipe/lp_test_blend.c
--- a/src/gallium/drivers/llvmpipe/lp_test_blend.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_test_blend.c	2024-01-07 21:05:23.855129283 +0100
@@ -452,7 +452,7 @@
       dump_blend_type(stdout, blend, type);
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module", context, NULL);
diff -Naur a/src/gallium/drivers/llvmpipe/lp_test_conv.c b/src/gallium/drivers/llvmpipe/lp_test_conv.c
--- a/src/gallium/drivers/llvmpipe/lp_test_conv.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_test_conv.c	2024-01-07 21:05:23.855129283 +0100
@@ -223,7 +223,7 @@
    }
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module", context, NULL);
diff -Naur a/src/gallium/drivers/llvmpipe/lp_test_format.c b/src/gallium/drivers/llvmpipe/lp_test_format.c
--- a/src/gallium/drivers/llvmpipe/lp_test_format.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_test_format.c	2024-01-07 21:05:23.855129283 +0100
@@ -150,7 +150,7 @@
    unsigned i, j, k, l;
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module_float", context, NULL);
@@ -254,7 +254,7 @@
    unsigned i, j, k, l;
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module_unorm8", context, NULL);
diff -Naur a/src/gallium/drivers/llvmpipe/lp_test_printf.c b/src/gallium/drivers/llvmpipe/lp_test_printf.c
--- a/src/gallium/drivers/llvmpipe/lp_test_printf.c	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/drivers/llvmpipe/lp_test_printf.c	2024-01-07 21:05:23.855129283 +0100
@@ -96,7 +96,7 @@
    boolean success = TRUE;
 
    context = LLVMContextCreate();
-#if LLVM_VERSION_MAJOR >= 15
+#if LLVM_VERSION_MAJOR == 15
    LLVMContextSetOpaquePointers(context, false);
 #endif
    gallivm = gallivm_create("test_module", context, NULL);
diff -Naur a/src/gallium/frontends/clover/llvm/codegen/common.cpp b/src/gallium/frontends/clover/llvm/codegen/common.cpp
--- a/src/gallium/frontends/clover/llvm/codegen/common.cpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/frontends/clover/llvm/codegen/common.cpp	2024-01-07 21:44:59.303508511 +0100
@@ -34,6 +34,7 @@
 #include <llvm/Support/Allocator.h>
 
 #include "llvm/codegen.hpp"
+#include "llvm/compat.hpp"
 #include "llvm/metadata.hpp"
 
 #include "CL/cl.h"
@@ -197,6 +198,7 @@
       ::llvm::DataLayout dl(&mod);
       const auto size_type =
          dl.getSmallestLegalIntType(mod.getContext(), sizeof(cl_uint) * 8);
+      const unsigned size_align = compat::get_abi_type_alignment(dl, size_type);
 
       for (const auto &arg : f.args()) {
          const auto arg_type = arg.getType();
@@ -208,7 +210,7 @@
          const unsigned arg_api_size = dl.getTypeAllocSize(arg_type);
 
          const unsigned target_size = dl.getTypeStoreSize(arg_type);
-         const unsigned target_align = dl.getABITypeAlignment(arg_type);
+         const unsigned target_align = compat::get_abi_type_alignment(dl, arg_type);
 
          const auto type_name = get_str_argument_metadata(f, arg,
                                                           "kernel_arg_type");
@@ -229,7 +231,7 @@
             // Image size implicit argument.
             args.emplace_back(binary::argument::scalar, sizeof(cl_uint),
                               dl.getTypeStoreSize(size_type),
-                              dl.getABITypeAlignment(size_type),
+                              size_align,
                               binary::argument::zero_ext,
                               binary::argument::image_size);
 
@@ -237,7 +239,7 @@
             // Image format implicit argument.
             args.emplace_back(binary::argument::scalar, sizeof(cl_uint),
                               dl.getTypeStoreSize(size_type),
-                              dl.getABITypeAlignment(size_type),
+                              size_align,
                               binary::argument::zero_ext,
                               binary::argument::image_format);
 
@@ -259,7 +261,8 @@
 
                   args.emplace_back(binary::argument::local, arg_api_size,
                                     target_size,
-                                    (pointee_type->isVoidTy()) ? 8 : dl.getABITypeAlignment(pointee_type),
+                                    (pointee_type->isVoidTy()) ? 8 :
+                                    compat::get_abi_type_alignment(dl, pointee_type),
                                     binary::argument::zero_ext);
                } else {
                   // XXX: Correctly handle constant address space.  There is no
@@ -301,13 +304,13 @@
       // target according to the selected calling convention.
       args.emplace_back(binary::argument::scalar, sizeof(cl_uint),
                         dl.getTypeStoreSize(size_type),
-                        dl.getABITypeAlignment(size_type),
+                        size_align,
                         binary::argument::zero_ext,
                         binary::argument::grid_dimension);
 
       args.emplace_back(binary::argument::scalar, sizeof(cl_uint),
                         dl.getTypeStoreSize(size_type),
-                        dl.getABITypeAlignment(size_type),
+                        size_align,
                         binary::argument::zero_ext,
                         binary::argument::grid_offset);
 
diff -Naur a/src/gallium/frontends/clover/llvm/codegen/native.cpp b/src/gallium/frontends/clover/llvm/codegen/native.cpp
--- a/src/gallium/frontends/clover/llvm/codegen/native.cpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/frontends/clover/llvm/codegen/native.cpp	2024-01-07 22:10:07.269108716 +0100
@@ -116,7 +116,11 @@
 
       std::unique_ptr<TargetMachine> tm {
          t->createTargetMachine(target.triple, target.cpu, "", {},
+#if LLVM_VERSION_MAJOR >= 16
+                                std::nullopt, std::nullopt,
+#else
                                 ::llvm::None, ::llvm::None,
+#endif
                                 ::llvm::CodeGenOpt::Default) };
       if (!tm)
          fail(r_log, build_error(),
diff -Naur a/src/gallium/frontends/clover/llvm/compat.hpp b/src/gallium/frontends/clover/llvm/compat.hpp
--- a/src/gallium/frontends/clover/llvm/compat.hpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/frontends/clover/llvm/compat.hpp	2024-01-07 21:44:59.303508511 +0100
@@ -38,7 +38,6 @@
 
 #include <llvm/Config/llvm-config.h>
 
-#include <llvm/ADT/Triple.h>
 #include <llvm/Analysis/TargetLibraryInfo.h>
 #include <llvm/IR/LegacyPassManager.h>
 #include <llvm/IR/LLVMContext.h>
@@ -59,6 +58,12 @@
 #include <llvm/Support/TargetRegistry.h>
 #endif
 
+#if LLVM_VERSION_MAJOR >= 17
+#include <llvm/TargetParser/Triple.h>
+#else
+#include <llvm/ADT/Triple.h>
+#endif
+
 namespace clover {
    namespace llvm {
       namespace compat {
@@ -96,6 +101,16 @@
                                                d);
          }
 
+         static inline unsigned
+         get_abi_type_alignment(::llvm::DataLayout dl, ::llvm::Type *type)
+         {
+#if LLVM_VERSION_MAJOR >= 16
+            return dl.getABITypeAlign(type).value();
+#else
+            return dl.getABITypeAlignment(type);
+#endif
+         }
+
          static inline bool
          is_scalable_vector(const ::llvm::Type *type)
          {
diff -Naur a/src/gallium/frontends/clover/llvm/invocation.cpp b/src/gallium/frontends/clover/llvm/invocation.cpp
--- a/src/gallium/frontends/clover/llvm/invocation.cpp	2023-01-11 18:46:41.000000000 +0100
+++ b/src/gallium/frontends/clover/llvm/invocation.cpp	2024-01-07 22:34:07.782698447 +0100
@@ -27,13 +27,17 @@
 #include <llvm/IR/DiagnosticPrinter.h>
 #include <llvm/IR/DiagnosticInfo.h>
 #include <llvm/IR/LLVMContext.h>
+#include <llvm/IR/Module.h>
 #include <llvm/Support/raw_ostream.h>
-#include <llvm/Transforms/IPO/PassManagerBuilder.h>
+#include <llvm/Transforms/IPO/Internalize.h>
 #include <llvm-c/Target.h>
 #ifdef HAVE_CLOVER_SPIRV
 #include <LLVMSPIRVLib/LLVMSPIRVLib.h>
 #endif
 
+#include <llvm-c/TargetMachine.h>
+#include <llvm-c/Transforms/PassBuilder.h>
+#include <llvm/Support/CBindingWrapping.h>
 #include <clang/CodeGen/CodeGenAction.h>
 #include <clang/Lex/PreprocessorOptions.h>
 #include <clang/Frontend/TextDiagnosticBuffer.h>
@@ -439,10 +443,10 @@
 
 namespace {
    void
-   optimize(Module &mod, unsigned optimization_level,
+   optimize(Module &mod,
+            const std::string& ir_target,
+            unsigned optimization_level,
             bool internalize_symbols) {
-      ::llvm::legacy::PassManager pm;
-
       // By default, the function internalizer pass will look for a function
       // called "main" and then mark all other functions as internal.  Marking
       // functions as internal enables the optimizer to perform optimizations
@@ -458,19 +462,53 @@
       if (internalize_symbols) {
          std::vector<std::string> names =
             map(std::mem_fn(&Function::getName), get_kernels(mod));
-         pm.add(::llvm::createInternalizePass(
+         internalizeModule(mod,
                       [=](const ::llvm::GlobalValue &gv) {
                          return std::find(names.begin(), names.end(),
                                           gv.getName()) != names.end();
-                      }));
+                      });
+      }
+
+
+      const char *opt_str = NULL;
+      LLVMCodeGenOptLevel level;
+      switch (optimization_level) {
+      case 0:
+      default:
+         opt_str = "default<O0>";
+         level = LLVMCodeGenLevelNone;
+         break;
+      case 1:
+         opt_str = "default<O1>";
+         level = LLVMCodeGenLevelLess;
+         break;
+      case 2:
+         opt_str = "default<O2>";
+         level = LLVMCodeGenLevelDefault;
+         break;
+      case 3:
+         opt_str = "default<O3>";
+         level = LLVMCodeGenLevelAggressive;
+         break;
       }
 
-      ::llvm::PassManagerBuilder pmb;
-      pmb.OptLevel = optimization_level;
-      pmb.LibraryInfo = new ::llvm::TargetLibraryInfoImpl(
-         ::llvm::Triple(mod.getTargetTriple()));
-      pmb.populateModulePassManager(pm);
-      pm.run(mod);
+      const target &target = ir_target;
+      LLVMTargetRef targ;
+      char *err_message;
+
+      if (LLVMGetTargetFromTriple(target.triple.c_str(), &targ, &err_message))
+         return;
+      LLVMTargetMachineRef tm =
+         LLVMCreateTargetMachine(targ, target.triple.c_str(),
+                                 target.cpu.c_str(), "", level,
+                                 LLVMRelocDefault, LLVMCodeModelDefault);
+
+      if (!tm)
+         return;
+      LLVMPassBuilderOptionsRef opts = LLVMCreatePassBuilderOptions();
+      LLVMRunPasses(wrap(&mod), opt_str, tm, opts);
+
+      LLVMDisposeTargetMachine(tm);
    }
 
    std::unique_ptr<Module>
@@ -500,7 +538,7 @@
    auto c = create_compiler_instance(dev, dev.ir_target(), options, r_log);
    auto mod = link(*ctx, *c, binaries, r_log);
 
-   optimize(*mod, c->getCodeGenOpts().OptimizationLevel, !create_library);
+   optimize(*mod, dev.ir_target(), c->getCodeGenOpts().OptimizationLevel, !create_library);
 
    static std::atomic_uint seq(0);
    const std::string id = "." + mod->getModuleIdentifier() + "-" +
