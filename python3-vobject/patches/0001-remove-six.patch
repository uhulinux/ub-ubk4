From 4475a91c39f0b136caf867a2e0eeb37561f2151b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mark=C3=A9ta?= <meggy.calabkova@gmail.com>
Date: Thu, 19 Dec 2024 10:24:42 +0100
Subject: [PATCH] remove six

---
 vobject/base.py      | 12 ++++++------
 vobject/hcalendar.py |  4 ++--
 vobject/icalendar.py | 10 +++++-----
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/vobject/base.py b/vobject/base.py
index 6765608..8a1e694 100644
--- a/vobject/base.py
+++ b/vobject/base.py
@@ -6,7 +6,7 @@ import copy
 import codecs
 import logging
 import re
-import six
+import io
 import sys
 
 # Package version
@@ -858,7 +858,7 @@ def getLogicalLines(fp, allowQP=True):
     Quoted-printable data will be decoded in the Behavior decoding phase.
 
     # We're leaving this test in for awhile, because the unittest was ugly and dumb.
-    >>> from six import StringIO
+    >>> from io import StringIO
     >>> f=StringIO(testLines)
     >>> for n, l in enumerate(getLogicalLines(f)):
     ...     print("Line %s: %s" % (n, l[0]))
@@ -881,7 +881,7 @@ def getLogicalLines(fp, allowQP=True):
 
     else:
         quotedPrintable = False
-        newbuffer = six.StringIO
+        newbuffer = io.StringIO
         logicalLine = newbuffer()
         lineNumber = 0
         lineStartNumber = 0
@@ -996,7 +996,7 @@ def defaultSerialize(obj, buf, lineLength):
     """
     Encode and fold obj and its children, write to buf or return a string.
     """
-    outbuf = buf or six.StringIO()
+    outbuf = buf or io.StringIO()
 
     if isinstance(obj, Component):
         if obj.group is None:
@@ -1018,7 +1018,7 @@ def defaultSerialize(obj, buf, lineLength):
         if obj.behavior and not startedEncoded:
             obj.behavior.encode(obj)
 
-        s = six.StringIO()
+        s = io.StringIO()
 
         if obj.group is not None:
             s.write(obj.group + '.')
@@ -1082,7 +1082,7 @@ def readComponents(streamOrString, validate=False, transform=True,
     Generate one Component at a time from a stream.
     """
     if isinstance(streamOrString, basestring):
-        stream = six.StringIO(streamOrString)
+        stream = io.StringIO(streamOrString)
     else:
         stream = streamOrString
 
diff --git a/vobject/hcalendar.py b/vobject/hcalendar.py
index 29c77f3..c9bec53 100644
--- a/vobject/hcalendar.py
+++ b/vobject/hcalendar.py
@@ -28,7 +28,7 @@ and an equivalent event in hCalendar format with various elements optimized appr
 </span>
 """
 
-import six
+import io
 
 from datetime import date, datetime, timedelta
 
@@ -45,7 +45,7 @@ class HCalendar(VCalendar2_0):
         Serialize iCalendar to HTML using the hCalendar microformat (http://microformats.org/wiki/hcalendar)
         """
 
-        outbuf = buf or six.StringIO()
+        outbuf = buf or io.StringIO()
         level = 0  # holds current indentation level
         tabwidth = 3
 
diff --git a/vobject/icalendar.py b/vobject/icalendar.py
index dcabafc..b6095bb 100644
--- a/vobject/icalendar.py
+++ b/vobject/icalendar.py
@@ -10,7 +10,7 @@ import string
 import base64
 
 from dateutil import rrule, tz
-import six
+import io
 
 try:
     import pytz
@@ -56,7 +56,7 @@ def toUnicode(s):
     """
     Take a string or unicode, turn it into unicode, decoding as utf-8
     """
-    if isinstance(s, six.binary_type):
+    if isinstance(s, bytes):
         s = s.decode('utf-8')
     return s
 
@@ -135,7 +135,7 @@ class TimezoneComponent(Component):
         good_lines = ('rdate', 'rrule', 'dtstart', 'tzname', 'tzoffsetfrom',
                       'tzoffsetto', 'tzid')
         # serialize encodes as utf-8, cStringIO will leave utf-8 alone
-        buffer = six.StringIO()
+        buffer = io.StringIO()
         # allow empty VTIMEZONEs
         if len(self.contents) == 0:
             return None
@@ -569,7 +569,7 @@ class RecurringComponent(Component):
                     self.add(name).value = setlist
             elif name in RULENAMES:
                 for rule in setlist:
-                    buf = six.StringIO()
+                    buf = io.StringIO()
                     buf.write('FREQ=')
                     buf.write(FREQUENCIES[rule._freq])
 
@@ -1010,7 +1010,7 @@ class VCalendar2_0(VCalendarComponentBehavior):
             transformed = obj
             undoTransform = False
         out = None
-        outbuf = buf or six.StringIO()
+        outbuf = buf or io.StringIO()
         if obj.group is None:
             groupString = ''
         else:
-- 
2.48.1

