#!/bin/bash -eux

case "$UB_VERSION" in
	*.*.*)
		VERSION_BASE="${UB_VERSION/\~/-}-${UB_RELEASE}"
		;;
	*.*~*)
		VERSION_BASE="${UB_VERSION/\~/.0-}-${UB_RELEASE}"
		;;
	*.*)
		VERSION_BASE="${UB_VERSION}.0-${UB_RELEASE}"
		;;
	*)
		exit 1
		;;
esac

export KBUILD_BUILD_TIMESTAMP="$(LC_ALL=C LANG=C date)"

NUMCPUS="$(grep ^processor /proc/cpuinfo|wc -l)"

rm -f localversion*

ARCH="x86_64"

VERSION="${VERSION_BASE}.$ARCH"
ub_replace "^EXTRAVERSION =[\t ]*\(\.\([0-9]\+\)\)*.*" "EXTRAVERSION = \1-${VERSION#*-}" Makefile

cp "$UB_SRCDIR"/config/config."$ARCH" .config
cp "$UB_SRCDIR"/config/config."$ARCH" arch/x86/configs/"$ARCH"_defconfig

# diff -u <(grep -v '^#' .config|sort) <(grep -v '^#' arch/x86/configs/"$ARCH"_defconfig|sort)

make olddefconfig
# make prepare
# yes "" | make config >/dev/null

make ARCH="$ARCH" -j"$NUMCPUS" scripts
make ARCH="$ARCH" -j"$NUMCPUS" bzImage
make ARCH="$ARCH" -j"$NUMCPUS" modules

bzimage="kernel"

# /boot
mkdir -p "$UB_OBJECTDIR/boot"
cp -a System.map            "$UB_OBJECTDIR/boot/System.map-$VERSION"
cp -a arch/x86/boot/bzImage "$UB_OBJECTDIR/boot/$bzimage-$VERSION"

ln -s "$bzimage-$VERSION" "$UB_OBJECTDIR/boot/$bzimage.$ARCH"

# modules
make \
	INSTALL_PATH="$UB_OBJECTDIR/boot" \
	INSTALL_MOD_PATH="$UB_OBJECTDIR" \
	modules_install

# check module licenses
[  -d  "$UB_OBJECTDIR"/lib/modules/"$VERSION" ]
echo "checking for missing or incorrect license tags..."
( find $UB_OBJECTDIR/lib/modules/$VERSION -name '*.ko' | xargs /sbin/modinfo -l | \
	grep -E -v 'GPL( v2)?$|Dual BSD/GPL$|Dual MPL/GPL$|GPL and additional rights$' ) && \
	echo "error: there are modules without license tag. please fix."
#	exit 1

# check module symbols
if depmod -nea -b "$UB_OBJECTDIR" -F "$UB_OBJECTDIR"/boot/System.map "$VERSION" 2>&1 | grep "^WARNING:"; then
	echo "fix WARNINGs above!"
	exit 1
fi

# install headers
make \
	INSTALL_HDR_PATH="$UB_OBJECTDIR"/usr/ \
	headers_install

find $UB_OBJECTDIR/usr/include \
     \( -name .install -o -name .check -o \
     	-name ..install.cmd -o -name ..check.cmd \) | xargs rm -f

# And save the headers/makefiles etc for building modules against

mkdir -p "$UB_OBJECTDIR/usr/src/linux-$VERSION"
rm -f "$UB_OBJECTDIR/usr/src/linux"
ln -sf "linux-$VERSION" "$UB_OBJECTDIR/usr/src/linux"

cp -av --parents .config Makefile Module.symvers arch/x86/Makefile arch/x86/Makefile_32.cpu scripts "$UB_OBJECTDIR"/usr/src/linux/
cp --parents `find  -type f -name "Makefile*" -o -name "Kconfig*"` "$UB_OBJECTDIR"/usr/src/linux/
cp -av include "$UB_OBJECTDIR"/usr/src/linux/
cp -av arch/x86/include/asm/. "$UB_OBJECTDIR"/usr/src/linux/include/asm/
cp -a --parents arch/x86/include "$UB_OBJECTDIR"/usr/src/linux/

if [ -s Module.markers ]; then
  cp Module.markers $UB_OBJECTDIR/lib/modules/$VERSION/build
fi
if [ -d arch/$ARCH/scripts ]; then
	cp -a arch/$ARCH/scripts $UB_OBJECTDIR/lib/modules/$VERSION/build/arch/$ARCH/ || :
fi
if [ -f arch/$ARCH/*lds ]; then
	cp -a arch/$ARCH/*lds $UB_OBJECTDIR/lib/modules/$VERSION/build/arch/$ARCH/ || :
fi

rm -f $UB_OBJECTDIR/lib/modules/$VERSION/build
ln -sf ../../../usr/src/linux-$VERSION $UB_OBJECTDIR/lib/modules/$VERSION/build
rm $UB_OBJECTDIR/lib/modules/$VERSION/source
ln -sf ../../../usr/src/linux-$VERSION $UB_OBJECTDIR/lib/modules/$VERSION/source

# add objtool for external module building and enabled VALIDATION_STACK option
cp $UB_COMPILEDIR/tools/objtool/objtool $UB_OBJECTDIR/usr/src/linux-$VERSION/tools/objtool/

# remove unneeded architectures
for _archs in $UB_OBJECTDIR/usr/src/linux-$VERSION/arch/*/; do
    [[ ${_archs} == */x86/ ]] && continue
    rm -r "${_archs}"
done
for _dtcs in arc arm arm64 c6x cris h8300 metag microblaze mips nios2 openrisc powerpc sh xtensa; do
    rm -f $UB_OBJECTDIR/usr/src/linux-$VERSION/scripts/dtc/include-prefixes/"$_dtcs"
done

rm -rf $UB_OBJECTDIR/usr/src/linux-$VERSION/Documentation
find "$UB_OBJECTDIR/usr/src/linux-$VERSION/" -name "*.o" -print0 | xargs -r0 rm -v
find "$UB_OBJECTDIR/usr/src/linux-$VERSION/" -name "*.cmd" -print0 | xargs -r0 rm -v

# remove mISDN headers
rm -f "$UB_OBJECTDIR"/usr/src/linux/include/linux/mISDN*

# System.map
cp -a System.map "$UB_OBJECTDIR/lib/modules/$VERSION/"

# bzImage symlink
ln -s "$bzimage.$ARCH" "$UB_OBJECTDIR/boot/$bzimage"

# cpupower
cd tools/power/cpupower
ub_make VERSION=${UB_VERSION}
