diff -Naur a/dependencies/CMakeLists.txt b/dependencies/CMakeLists.txt
--- a/dependencies/CMakeLists.txt	2024-11-07 10:09:59.000000000 +0100
+++ b/dependencies/CMakeLists.txt	2024-11-12 03:16:10.646182606 +0100
@@ -66,6 +66,7 @@
 # See https://cmake.org/cmake/help/v3.15/module/FindGettext.html
 # find_package(Gettext REQUIRED)
 
+find_package(fmt REQUIRED)
 
 add_subdirectory(catch2)
 add_subdirectory(nlohmann_json)
diff -Naur a/src/applib/CMakeLists.txt b/src/applib/CMakeLists.txt
--- a/src/applib/CMakeLists.txt	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/CMakeLists.txt	2024-11-12 03:22:07.723752102 +0100
@@ -85,6 +85,7 @@
 		app_gtkmm_interface
 		app_gettext_interface
 		build_config
+		fmt
 )
 
 target_include_directories(applib
diff -Naur a/src/applib/selftest.cpp b/src/applib/selftest.cpp
--- a/src/applib/selftest.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/selftest.cpp	2024-11-12 03:05:47.863729777 +0100
@@ -16,7 +16,7 @@
 #include <cmath>  // std::floor
 #include <chrono>
 #include <cstdint>
-#include <format>
+#include <fmt/format.h>
 #include <memory>
 #include <optional>
 #include <unordered_map>
@@ -218,7 +218,7 @@
 		// Translators: {} is a test name - Short test, etc.
 		std::string type_name = get_test_displayable_name(type_);
 		return hz::Unexpected(SelfTestExecutionError::UnsupportedTest,
-				std::vformat(_("{} is unsupported by this drive."), std::make_format_args(type_name)));
+				fmt::vformat(_("{} is unsupported by this drive."), fmt::make_format_args(type_name)));
 	}
 
 	std::string test_param;
@@ -239,7 +239,7 @@
 	if (!execute_status.has_value()) {
 		std::string message = execute_status.error().message();
 		return hz::Unexpected(SelfTestExecutionError::CommandFailed,
-				std::vformat(_("Sending command to drive failed: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Sending command to drive failed: {}"), fmt::make_format_args(message)));
 	}
 
 	const bool ata_test_started = app_regex_partial_match(R"(/^Drive command .* successful\.\nTesting has begun\.$/mi)", output);
@@ -307,7 +307,7 @@
 	if (!execute_status) {
 		std::string message = execute_status.error().message();
 		return hz::Unexpected(SelfTestExecutionError::CommandFailed,
-				std::vformat(_("Sending command to drive failed: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Sending command to drive failed: {}"), fmt::make_format_args(message)));
 	}
 
 	// this command prints success even if no test was running.
@@ -335,7 +335,7 @@
 	if (!update_status) {  // update can error out too.
 		std::string message = update_status.error().message();
 		return hz::Unexpected(SelfTestExecutionError::UpdateError,
-				std::vformat(_("Error fetching test progress information: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Error fetching test progress information: {}"), fmt::make_format_args(message)));
 	}
 
 	return {};  // everything ok
@@ -372,7 +372,7 @@
 	if (!execute_status) {
 		std::string message = execute_status.error().message();
 		return hz::Unexpected(SelfTestExecutionError::CommandFailed,
-				std::vformat(_("Sending command to drive failed: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Sending command to drive failed: {}"), fmt::make_format_args(message)));
 	}
 
 
@@ -382,7 +382,7 @@
 	auto parse_status = parser->parse(output);
 	if (!parse_status) {
 		return hz::Unexpected(SelfTestExecutionError::ParseError,
-				std::vformat(_("Cannot parse smartctl output: {}"), std::make_format_args(parse_status.error().message())));
+				fmt::vformat(_("Cannot parse smartctl output: {}"), fmt::make_format_args(parse_status.error().message())));
 	}
 	const auto property_repo = StoragePropertyProcessor::process_properties(
 			parser->get_property_repository(), drive_->get_detected_type());
diff -Naur a/src/applib/smartctl_json_ata_parser.cpp b/src/applib/smartctl_json_ata_parser.cpp
--- a/src/applib/smartctl_json_ata_parser.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/smartctl_json_ata_parser.cpp	2024-11-12 03:00:39.026527176 +0100
@@ -12,7 +12,7 @@
 #include "smartctl_json_ata_parser.h"
 
 #include <cstdint>
-#include <format>
+#include <fmt/format.h>
 #include <optional>
 #include <string>
 #include <string_view>
@@ -209,7 +209,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -224,7 +224,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -243,12 +243,12 @@
 					if (jval1 && jval2 && jval3) {
 						StorageProperty p;
 						p.set_name(key, displayable_name);
-						// p.readable_value = std::format("{:X} {:X} {:X}", jval1.value(), jval2.value(), jval3.value());
-						p.readable_value = std::format("{:X}-{:06X}-{:08X}", jval1.value(), jval2.value(), jval3.value());
+						// p.readable_value = fmt::format("{:X} {:X} {:X}", jval1.value(), jval2.value(), jval3.value());
+						p.readable_value = fmt::format("{:X}-{:06X}-{:08X}", jval1.value(), jval2.value(), jval3.value());
 						p.value = p.readable_value;  // string-type value
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -257,7 +257,7 @@
 			{"user_capacity/bytes", _("Capacity"),
 				custom_string_formatter<int64_t>([](int64_t value)
 				{
-					return std::format("{} [{}; {} bytes]",
+					return fmt::format("{} [{}; {} bytes]",
 						hz::format_size(static_cast<uint64_t>(value), true),
 						hz::format_size(static_cast<uint64_t>(value), false),
 						hz::number_to_string_locale(value));
@@ -276,7 +276,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
 				}
 			},
 
@@ -286,10 +286,10 @@
 				{
 					std::vector<std::string> values;
 					if (auto jval1 = get_node_data<int64_t>(root_node, "logical_block_size"); jval1) {
-						values.emplace_back(std::format("{} bytes logical", jval1.value()));
+						values.emplace_back(fmt::format("{} bytes logical", jval1.value()));
 					}
 					if (auto jval2 = get_node_data<int64_t>(root_node, "physical_block_size"); jval2) {
-						values.emplace_back(std::format("{} bytes physical", jval2.value()));
+						values.emplace_back(fmt::format("{} bytes physical", jval2.value()));
 					}
 					if (!values.empty()) {
 						StorageProperty p;
@@ -298,7 +298,7 @@
 						p.value = p.readable_value;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -318,10 +318,10 @@
 				{
 					std::vector<std::string> values;
 					if (auto jval1 = get_node_data<std::string>(root_node, "interface_speed/max/string"); jval1) {
-						values.emplace_back(std::format("Max: {}", jval1.value()));
+						values.emplace_back(fmt::format("Max: {}", jval1.value()));
 					}
 					if (auto jval2 = get_node_data<std::string>(root_node, "interface_speed/current/string"); jval2) {
-						values.emplace_back(std::format("Current: {}", jval2.value()));
+						values.emplace_back(fmt::format("Current: {}", jval2.value()));
 					}
 					if (!values.empty()) {
 						StorageProperty p;
@@ -330,7 +330,7 @@
 						p.value = p.readable_value;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -348,11 +348,11 @@
 						std::string level_string = get_node_data<std::string>(root_node, "ata_aam/string").value_or("");
 						StorageProperty p;
 						p.set_name(key, displayable_name);
-						p.readable_value = std::format("{} ({})", level_string, level_result.value());
+						p.readable_value = fmt::format("{} ({})", level_string, level_result.value());
 						p.value = level_result.value();
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 			{"ata_aam/recommended_level", _("AAM Recommended Level"), integer_formatter<int64_t>()},
@@ -366,11 +366,11 @@
 						std::string level_string = get_node_data<std::string>(root_node, "ata_apm/string").value_or("");
 						StorageProperty p;
 						p.set_name(key, displayable_name);
-						p.readable_value = std::format("{} ({})", level_string, level_result.value());
+						p.readable_value = fmt::format("{} ({})", level_string, level_result.value());
 						p.value = level_result.value();
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -451,7 +451,7 @@
 						p.readable_value = p.get_value<bool>() ? _("Enabled") : _("Disabled");
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -480,7 +480,7 @@
 						p.value = status_str;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -495,7 +495,7 @@
 						p.value = std::chrono::seconds(value_val.value());
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -553,7 +553,7 @@
 						return p;
 					}
 
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -579,7 +579,7 @@
 						p.value = std::chrono::minutes(value_val.value());
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -594,7 +594,7 @@
 						p.value = std::chrono::minutes(value_val.value());
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -609,7 +609,7 @@
 						p.value = std::chrono::minutes(value_val.value());
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -629,7 +629,7 @@
 						p.value = value_val.value();
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 			{"ata_sct_capabilities/error_recovery_control_supported", _("SCT error recovery control supported"), bool_formatter(_("Yes"), _("No"))},
@@ -652,7 +652,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::Capabilities)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::Capabilities)));
 	}
 
 	return {};
@@ -718,7 +718,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::AtaAttributes)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::AtaAttributes)));
 	}
 
 	return {};
@@ -742,7 +742,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_log_directory/gp_dir_version").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("General Purpose Log Directory Version: {}", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("General Purpose Log Directory Version: {}", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 	if (get_node_exists(json_root_node, "ata_log_directory/smart_dir_version").value_or(false)) {
@@ -752,7 +752,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_log_directory/smart_dir_version").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("SMART Log Directory Version: {}", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("SMART Log Directory Version: {}", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 	if (get_node_exists(json_root_node, "ata_log_directory/smart_dir_multi_sector").value_or(false)) {
@@ -762,7 +762,7 @@
 		p.value = get_node_data<bool>(json_root_node, "ata_log_directory/smart_dir_multi_sector").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("Multi-sector log support: {}", p.get_value<bool>() ? "Yes" : "No"));
+		lines.emplace_back(fmt::format("Multi-sector log support: {}", p.get_value<bool>() ? "Yes" : "No"));
 		section_properties_found = true;
 	}
 
@@ -784,7 +784,7 @@
 
 			// Address, GPL/SL, RO/RW, Num Sectors (GPL, Smart) , Name
 			// 0x00       GPL,SL  R/O      1  Log Directory
-			lines.emplace_back(std::format(
+			lines.emplace_back(fmt::format(
 					"0x{:02X}    GPL Sectors: {:8}    SL Sectors: {:8}    {}{}    {}",
 					address,
 					gp_sectors == 0 ? "-" : std::to_string(gp_sectors),
@@ -810,7 +810,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::DirectoryLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::DirectoryLog)));
 	}
 
 	return {};
@@ -858,8 +858,8 @@
 			block.type_more_info = get_node_data<std::string>(table_entry, "error_description").value_or(std::string());
 
 			StorageProperty p;
-			std::string gen_name = std::format("{}/{}", table_key, block.error_num);
-			std::string disp_name = std::format("Error {}", block.error_num);
+			std::string gen_name = fmt::format("{}/{}", table_key, block.error_num);
+			std::string disp_name = fmt::format("Error {}", block.error_num);
 			p.set_name(gen_name, disp_name, gen_name);
 			p.section = StoragePropertySection::AtaErrorLog;
 			p.value = block;
@@ -871,7 +871,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::AtaErrorLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::AtaErrorLog)));
 	}
 
 	return {};
@@ -905,7 +905,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_smart_self_test_log/extended/count").value_or(0);
 		p.show_in_ui = false;
 		add_property(p);
-		counts.emplace_back(std::format("Self-test entries: {}", p.get_value<int64_t>()));
+		counts.emplace_back(fmt::format("Self-test entries: {}", p.get_value<int64_t>()));
 	}
 	// Error Count
 	{
@@ -915,7 +915,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_smart_self_test_log/extended/error_count_total").value_or(0);
 		p.show_in_ui = false;
 		add_property(p);
-		counts.emplace_back(std::format("Total error count: {}", p.get_value<int64_t>()));
+		counts.emplace_back(fmt::format("Total error count: {}", p.get_value<int64_t>()));
 	}
 	// Outdated Error Count
 	{
@@ -925,7 +925,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_smart_self_test_log/extended/error_count_outdated").value_or(0);
 		p.show_in_ui = false;
 		add_property(p);
-		counts.emplace_back(std::format("Outdated error count: {}", p.get_value<int64_t>()));
+		counts.emplace_back(fmt::format("Outdated error count: {}", p.get_value<int64_t>()));
 	}
 
 	// Displayed Counts
@@ -968,8 +968,8 @@
 			}
 
 			StorageProperty p;
-			std::string gen_name = std::format("{}/{}", table_key, entry_num);
-			std::string disp_name = std::format("Self-test entry {}", entry.test_num);
+			std::string gen_name = fmt::format("{}/{}", table_key, entry_num);
+			std::string disp_name = fmt::format("Self-test entry {}", entry.test_num);
 			p.set_name(gen_name, disp_name);
 			p.section = StoragePropertySection::SelftestLog;
 			p.value = entry;
@@ -983,7 +983,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelftestLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelftestLog)));
 	}
 
 	return {};
@@ -1007,7 +1007,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_smart_selective_self_test_log/revision").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("SMART Selective self-test log data structure revision number: {}", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("SMART Selective self-test log data structure revision number: {}", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 	if (get_node_exists(json_root_node, "ata_smart_selective_self_test_log/power_up_scan_resume_minutes").value_or(false)) {
@@ -1018,7 +1018,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "ata_smart_selective_self_test_log/power_up_scan_resume_minutes").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("If Selective self-test is pending on power-up, resume delay: {} minutes", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("If Selective self-test is pending on power-up, resume delay: {} minutes", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 	if (get_node_exists(json_root_node, "ata_smart_selective_self_test_log/flags/remainder_scan_enabled").value_or(false)) {
@@ -1029,7 +1029,7 @@
 		p.value = get_node_data<bool>(json_root_node, "ata_smart_selective_self_test_log/flags/remainder_scan_enabled").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("After scanning selected spans, scan remainder of the drive: {}", p.get_value<bool>() ? "Yes" : "No"));
+		lines.emplace_back(fmt::format("After scanning selected spans, scan remainder of the drive: {}", p.get_value<bool>() ? "Yes" : "No"));
 		section_properties_found = true;
 	}
 
@@ -1047,7 +1047,7 @@
 			const uint64_t lba_max = get_node_data<uint64_t>(table_entry, "lba_max").value_or(0);
 			const std::string status_str = get_node_data<std::string>(table_entry, "status/string").value_or(std::string());
 
-			lines.emplace_back(std::format(
+			lines.emplace_back(fmt::format(
 					"Span: {:2}    Min LBA: {:020}    Max LBA: {:020}    Status: {}",
 					entry_num,
 					lba_min,
@@ -1072,7 +1072,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelectiveSelftestLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelectiveSelftestLog)));
 	}
 
 	return {};
@@ -1090,59 +1090,59 @@
 	std::vector<std::string> lines;
 
 	if (get_node_exists(json_root_node, "ata_sct_status/format_version").value_or(false)) {
-		lines.emplace_back(std::format("SCT status version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/format_version").value_or(0)));
+		lines.emplace_back(fmt::format("SCT status version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/format_version").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/sct_version").value_or(false)) {
-		lines.emplace_back(std::format("SCT format version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/sct_version").value_or(0)));
+		lines.emplace_back(fmt::format("SCT format version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/sct_version").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/device_state").value_or(false)) {
-		lines.emplace_back(std::format("Device state: {}", get_node_data<std::string>(json_root_node, "ata_sct_status/device_state/string").value_or(std::string())));
+		lines.emplace_back(fmt::format("Device state: {}", get_node_data<std::string>(json_root_node, "ata_sct_status/device_state/string").value_or(std::string())));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/current").value_or(false)) {
-		lines.emplace_back(std::format("Current temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/current").value_or(0)));
+		lines.emplace_back(fmt::format("Current temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/current").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/power_cycle_min").value_or(false)) {
-		lines.emplace_back(std::format("Power cycle min. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/power_cycle_min").value_or(0)));
+		lines.emplace_back(fmt::format("Power cycle min. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/power_cycle_min").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/power_cycle_max").value_or(false)) {
-		lines.emplace_back(std::format("Power cycle max. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/power_cycle_max").value_or(0)));
+		lines.emplace_back(fmt::format("Power cycle max. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/power_cycle_max").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/lifetime_min").value_or(false)) {
-		lines.emplace_back(std::format("Lifetime min. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/lifetime_min").value_or(0)));
+		lines.emplace_back(fmt::format("Lifetime min. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/lifetime_min").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/lifetime_max").value_or(false)) {
-		lines.emplace_back(std::format("Lifetime max. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/lifetime_max").value_or(0)));
+		lines.emplace_back(fmt::format("Lifetime max. temperature: {}° Celsius", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/lifetime_max").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/under_limit_count").value_or(false)) {
-		lines.emplace_back(std::format("Under limit count: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/under_limit_count").value_or(0)));
+		lines.emplace_back(fmt::format("Under limit count: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/under_limit_count").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_status/temperature/over_limit_count").value_or(false)) {
-		lines.emplace_back(std::format("Over limit count: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/over_limit_count").value_or(0)));
+		lines.emplace_back(fmt::format("Over limit count: {}", get_node_data<int64_t>(json_root_node, "ata_sct_status/temperature/over_limit_count").value_or(0)));
 	}
 	lines.emplace_back();
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/version").value_or(false)) {
-		lines.emplace_back(std::format("SCT temperature history version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/version").value_or(0)));
+		lines.emplace_back(fmt::format("SCT temperature history version: {}", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/version").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/sampling_period_minutes").value_or(false)) {
-		lines.emplace_back(std::format("Temperature sampling period: {} min.", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/sampling_period_minutes").value_or(0)));
+		lines.emplace_back(fmt::format("Temperature sampling period: {} min.", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/sampling_period_minutes").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/logging_interval_minutes").value_or(false)) {
-		lines.emplace_back(std::format("Temperature logging interval: {} min.", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/logging_interval_minutes").value_or(0)));
+		lines.emplace_back(fmt::format("Temperature logging interval: {} min.", get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/logging_interval_minutes").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/temperature/op_limit_min").value_or(false)) {
-		lines.emplace_back(std::format("Recommended operating temperature (minimum): {}° Celsius",
+		lines.emplace_back(fmt::format("Recommended operating temperature (minimum): {}° Celsius",
 				get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/temperature/op_limit_min").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/temperature/op_limit_max").value_or(false)) {
-		lines.emplace_back(std::format("Recommended operating temperature (maximum): {}° Celsius",
+		lines.emplace_back(fmt::format("Recommended operating temperature (maximum): {}° Celsius",
 				get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/temperature/op_limit_max").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/temperature/limit_min").value_or(false)) {
-		lines.emplace_back(std::format("Allowed operating temperature (minimum): {}° Celsius",
+		lines.emplace_back(fmt::format("Allowed operating temperature (minimum): {}° Celsius",
 				get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/temperature/limit_min").value_or(0)));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_temperature_history/temperature/limit_max").value_or(false)) {
-		lines.emplace_back(std::format("Allowed operating temperature (maximum): {}° Celsius",
+		lines.emplace_back(fmt::format("Allowed operating temperature (maximum): {}° Celsius",
 				get_node_data<int64_t>(json_root_node, "ata_sct_temperature_history/temperature/limit_max").value_or(0)));
 	}
 
@@ -1162,7 +1162,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::TemperatureLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::TemperatureLog)));
 	}
 
 	return {};
@@ -1180,12 +1180,12 @@
 	std::vector<std::string> lines;
 
 	if (get_node_exists(json_root_node, "ata_sct_erc/read/enabled").value_or(false)) {
-		lines.emplace_back(std::format("SCT error recovery control (read): {}, {:.2f} seconds",
+		lines.emplace_back(fmt::format("SCT error recovery control (read): {}, {:.2f} seconds",
 				(get_node_data<bool>(json_root_node, "ata_sct_erc/read/enabled").value_or(false) ? "enabled" : "disabled"),
 				get_node_data<double>(json_root_node, "ata_sct_erc/read/deciseconds").value_or(0.) / 10.));
 	}
 	if (get_node_exists(json_root_node, "ata_sct_erc/write/enabled").value_or(false)) {
-		lines.emplace_back(std::format("SCT error recovery control (write): {}, {:.2f} seconds",
+		lines.emplace_back(fmt::format("SCT error recovery control (write): {}, {:.2f} seconds",
 				(get_node_data<bool>(json_root_node, "ata_sct_erc/write/enabled").value_or(false) ? "enabled" : "disabled"),
 				get_node_data<double>(json_root_node, "ata_sct_erc/write/deciseconds").value_or(0.) / 10.));
 	}
@@ -1204,7 +1204,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::ErcLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::ErcLog)));
 	}
 
 	return {};
@@ -1265,7 +1265,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::Statistics)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::Statistics)));
 	}
 
 	return {};
@@ -1295,7 +1295,7 @@
 			const int64_t value = get_node_data<int64_t>(table_entry, "value").value_or(0);
 //			const bool overflow = get_node_data<bool>(table_entry, "overflow").value_or(false);
 
-			lines.emplace_back(std::format(
+			lines.emplace_back(fmt::format(
 					"ID: 0x{:04X}    Size: {:8}    Value: {:20}    Description: {}",
 					id,
 					size,
@@ -1319,7 +1319,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::PhyLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::PhyLog)));
 	}
 
 	return {};
diff -Naur a/src/applib/smartctl_json_basic_parser.cpp b/src/applib/smartctl_json_basic_parser.cpp
--- a/src/applib/smartctl_json_basic_parser.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/smartctl_json_basic_parser.cpp	2024-11-12 03:01:03.482623175 +0100
@@ -14,7 +14,7 @@
 // #include <glibmm.h>
 //#include <clocale>  // localeconv
 #include <cstdint>
-#include <format>
+#include <fmt/format.h>
 #include <string_view>
 #include <tuple>
 #include <vector>
@@ -86,7 +86,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -101,7 +101,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -124,7 +124,7 @@
 			{"user_capacity/bytes", _("Capacity"),
 				custom_string_formatter<int64_t>([](int64_t value)
 				{
-					return std::format("{} [{}; {} bytes]",
+					return fmt::format("{} [{}; {} bytes]",
 						hz::format_size(static_cast<uint64_t>(value), true),
 						hz::format_size(static_cast<uint64_t>(value), false),
 						hz::number_to_string_locale(value));
@@ -143,7 +143,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
 				}
 			},
 
@@ -153,10 +153,10 @@
 				{
 					std::vector<std::string> values;
 					if (auto jval1 = get_node_data<int64_t>(root_node, "logical_block_size"); jval1) {
-						values.emplace_back(std::format("{} bytes logical", jval1.value()));
+						values.emplace_back(fmt::format("{} bytes logical", jval1.value()));
 					}
 					if (auto jval2 = get_node_data<int64_t>(root_node, "physical_block_size"); jval2) {
-						values.emplace_back(std::format("{} bytes physical", jval2.value()));
+						values.emplace_back(fmt::format("{} bytes physical", jval2.value()));
 					}
 					if (!values.empty()) {
 						StorageProperty p;
@@ -165,7 +165,7 @@
 						p.value = p.readable_value;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -183,10 +183,10 @@
 				{
 					std::vector<std::string> values;
 					if (auto jval1 = get_node_data<std::string>(root_node, "interface_speed/max/string"); jval1) {
-						values.emplace_back(std::format("Max: {}", jval1.value()));
+						values.emplace_back(fmt::format("Max: {}", jval1.value()));
 					}
 					if (auto jval2 = get_node_data<std::string>(root_node, "interface_speed/current/string"); jval2) {
-						values.emplace_back(std::format("Current: {}", jval2.value()));
+						values.emplace_back(fmt::format("Current: {}", jval2.value()));
 					}
 					if (!values.empty()) {
 						StorageProperty p;
@@ -195,7 +195,7 @@
 						p.value = p.readable_value;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
diff -Naur a/src/applib/smartctl_json_nvme_parser.cpp b/src/applib/smartctl_json_nvme_parser.cpp
--- a/src/applib/smartctl_json_nvme_parser.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/smartctl_json_nvme_parser.cpp	2024-11-12 03:01:25.070707800 +0100
@@ -12,7 +12,7 @@
 #include "smartctl_json_nvme_parser.h"
 
 #include <cstdint>
-#include <format>
+#include <fmt/format.h>
 #include <optional>
 #include <string>
 #include <string_view>
@@ -125,7 +125,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -140,7 +140,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 				}
 			},
 
@@ -151,7 +151,7 @@
 			{"nvme_total_capacity", _("Total Capacity"),
 				custom_string_formatter<int64_t>([](int64_t value)
 				{
-					return std::format("{} [{}; {} bytes]",
+					return fmt::format("{} [{}; {} bytes]",
 						hz::format_size(static_cast<uint64_t>(value), true),
 						hz::format_size(static_cast<uint64_t>(value), false),
 						hz::number_to_string_locale(value));
@@ -161,7 +161,7 @@
 			{"nvme_unallocated_capacity", _("Unallocated Capacity"),
 				custom_string_formatter<int64_t>([](int64_t value)
 				{
-					return std::format("{} [{}; {} bytes]",
+					return fmt::format("{} [{}; {} bytes]",
 						hz::format_size(static_cast<uint64_t>(value), true),
 						hz::format_size(static_cast<uint64_t>(value), false),
 						hz::number_to_string_locale(value));
@@ -171,7 +171,7 @@
 			{"user_capacity/bytes", _("Capacity"),
 				custom_string_formatter<int64_t>([](int64_t value)
 				{
-					return std::format("{} [{}; {} bytes]",
+					return fmt::format("{} [{}; {} bytes]",
 						hz::format_size(static_cast<uint64_t>(value), true),
 						hz::format_size(static_cast<uint64_t>(value), false),
 						hz::number_to_string_locale(value));
@@ -190,7 +190,7 @@
 						p.show_in_ui = false;
 						return p;
 					}
-					return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
+					return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", "user_capacity/bytes"));
 				}
 			},
 
@@ -250,7 +250,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::OverallHealth)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::OverallHealth)));
 	}
 
 	return {};
@@ -289,7 +289,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeHealth)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeHealth)));
 	}
 
 	return {};
@@ -314,7 +314,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "nvme_error_information_log/size").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("Non-Persistent Error Log Size: {}", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("Non-Persistent Error Log Size: {}", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 	if (get_node_exists(json_root_node, "nvme_error_information_log/read").value_or(false)) {
@@ -325,7 +325,7 @@
 		p.value = get_node_data<int64_t>(json_root_node, "nvme_error_information_log/size").value_or(0);
 		add_property(p);
 
-		lines.emplace_back(std::format("Number of Error Log Entries Read: {}", p.get_value<int64_t>()));
+		lines.emplace_back(fmt::format("Number of Error Log Entries Read: {}", p.get_value<int64_t>()));
 		section_properties_found = true;
 	}
 
@@ -344,7 +344,7 @@
 			const uint64_t lba = get_node_data<uint64_t>(table_entry, "lba/value").value_or(0);
 
 			// Error #, Command ID, LBA, Status
-			lines.emplace_back(std::format(
+			lines.emplace_back(fmt::format(
 					"Error {:3}    Command ID: {:04X}    LBA: {:020}    {}",
 					error_count,
 					command_id,
@@ -368,7 +368,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeErrorLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeErrorLog)));
 	}
 
 	return {};
@@ -426,7 +426,7 @@
 		auto value_val = get_node_data<uint8_t>(json_root_node, "nvme_self_test_log/current_self_test_completion_percent");
 		if (value_val.has_value()) {
 			p.value = value_val.value();
-			p.readable_value = std::format("{} %", value_val.value());
+			p.readable_value = fmt::format("{} %", value_val.value());
 			add_property(p);
 		}
 	}
@@ -478,8 +478,8 @@
 			}
 
 			StorageProperty p;
-			std::string gen_name = std::format("{}/{}", table_key, entry_num);
-			std::string disp_name = std::format("Self-test entry {}", entry.test_num);
+			std::string gen_name = fmt::format("{}/{}", table_key, entry_num);
+			std::string disp_name = fmt::format("Self-test entry {}", entry.test_num);
 			p.set_name(gen_name, disp_name);
 			p.section = StoragePropertySection::SelftestLog;
 			p.value = entry;
@@ -493,7 +493,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelftestLog)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::SelftestLog)));
 	}
 
 	return {};
@@ -540,7 +540,7 @@
 
 	if (!section_properties_found) {
 		return hz::Unexpected(SmartctlParserError::NoSection,
-				std::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeAttributes)));
+				fmt::format("No section {} parsed.", StoragePropertySectionExt::get_displayable_name(StoragePropertySection::NvmeAttributes)));
 	}
 
 	return {};
diff -Naur a/src/applib/smartctl_json_parser_helpers.h b/src/applib/smartctl_json_parser_helpers.h
--- a/src/applib/smartctl_json_parser_helpers.h	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/smartctl_json_parser_helpers.h	2024-11-12 03:23:38.960149923 +0100
@@ -13,7 +13,7 @@
 #define SMARTCTL_JSON_PARSER_HELPERS_H
 
 #include <cstddef>
-#include <format>
+#include <fmt/format.h>
 #include <functional>
 #include <string>
 #include <string_view>
@@ -62,7 +62,7 @@
 
 		if (!curr->is_object()) {  // we can't have non-object values in the middle of a path
 			return hz::Unexpected(SmartctlJsonParserError::UnexpectedObjectInPath,
-					std::format("Cannot get node data \"{}\", component \"{}\" is not an object.", path, comp_name));
+					fmt::format("Cannot get node data \"{}\", component \"{}\" is not an object.", path, comp_name));
 		}
 		if (auto iter = curr->find(comp_name); iter != curr->end()) {  // path component exists
 			const auto& jval = iter.value();
@@ -74,7 +74,7 @@
 
 		} else {  // path component doesn't exist
 			return hz::Unexpected(SmartctlJsonParserError::PathNotFound,
-					std::format("Cannot get node data \"{}\", component \"{}\" does not exist.", path, comp_name));
+					fmt::format("Cannot get node data \"{}\", component \"{}\" does not exist.", path, comp_name));
 		}
 	}
 
@@ -99,7 +99,7 @@
 	}
 	catch (nlohmann::json::type_error& ex) {
 		return hz::Unexpected(SmartctlJsonParserError::TypeError,
-				std::format("Cannot get node data \"{}\", component has wrong type: {}.", path, ex.what()));
+				fmt::format("Cannot get node data \"{}\", component has wrong type: {}.", path, ex.what()));
 	}
 }
 
@@ -176,7 +176,7 @@
 			p.value = jval.value();
 			return p;
 		}
-		return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+		return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 	};
 }
 
@@ -200,7 +200,7 @@
 			return return_property;
 		}
 
-		return hz::Unexpected(SmartctlParserError::InternalError, std::format("Error getting key {} from JSON data.", key));
+		return hz::Unexpected(SmartctlParserError::InternalError, fmt::format("Error getting key {} from JSON data.", key));
 	};
 }
 
@@ -220,7 +220,7 @@
 			p.value = jval.value();
 			return p;
 		}
-		return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+		return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 	};
 }
 
@@ -239,11 +239,11 @@
 			p.set_name(key, displayable_name);
 			// p.reported_value = (jval.value() ? true_str : false_str);
 			std::string num_str = hz::number_to_string_locale(jval.value());
-			p.readable_value = std::vformat(format_string, std::make_format_args(num_str));
+			p.readable_value = fmt::vformat(format_string, fmt::make_format_args(num_str));
 			p.value = jval.value();
 			return p;
 		}
-		return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+		return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 	};
 }
 
@@ -264,7 +264,7 @@
 			p.value = jval.value();
 			return p;
 		}
-		return hz::Unexpected(SmartctlParserError::KeyNotFound, std::format("Error getting key {} from JSON data.", key));
+		return hz::Unexpected(SmartctlParserError::KeyNotFound, fmt::format("Error getting key {} from JSON data.", key));
 	};
 }
 
@@ -289,10 +289,10 @@
 		if (json_ver->size() < 2) {
 			return hz::Unexpected(SmartctlParserError::DataError, "Error getting smartctl version from JSON data: Not enough version components.");
 		}
-		return hz::Unexpected(SmartctlParserError::DataError, std::format("Error getting smartctl version from JSON data: {}", json_ver.error().message()));
+		return hz::Unexpected(SmartctlParserError::DataError, fmt::format("Error getting smartctl version from JSON data: {}", json_ver.error().message()));
 	}
 
-	smartctl_version = std::format("{}.{}", json_ver->at(0), json_ver->at(1));
+	smartctl_version = fmt::format("{}.{}", json_ver->at(0), json_ver->at(1));
 
 	{
 		merged_property.set_name("smartctl/version/_merged", _("Smartctl Version"));
@@ -303,7 +303,7 @@
 	}
 	{
 		full_property.set_name("smartctl/version/_merged_full", _("Smartctl Version"));
-		full_property.readable_value = std::format("{}.{} r{} {} {}", json_ver->at(0), json_ver->at(1),
+		full_property.readable_value = fmt::format("{}.{} r{} {} {}", json_ver->at(0), json_ver->at(1),
 				get_node_data<std::string>(json_root_node, "smartctl/svn_revision", {}).value_or(std::string()),
 				get_node_data<std::string>(json_root_node, "smartctl/platform_info", {}).value_or(std::string()),
 				get_node_data<std::string>(json_root_node, "smartctl/build_info", {}).value_or(std::string())
diff -Naur a/src/applib/smartctl_text_ata_parser.cpp b/src/applib/smartctl_text_ata_parser.cpp
--- a/src/applib/smartctl_text_ata_parser.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/smartctl_text_ata_parser.cpp	2024-11-12 03:30:58.890051161 +0100
@@ -20,6 +20,7 @@
 #include <string_view>
 #include <utility>
 #include <vector>
+#include <fmt/format.h>
 
 // #include "hz/locale_tools.h"  // ScopedCLocale, locale_c_get().
 #include "storage_property.h"
@@ -1814,7 +1815,7 @@
 			const std::string lba = hz::string_trim_copy(it->str(7));
 
 			StorageProperty p(pt);
-			p.set_name(std::format("ata_smart_self_test_log/entry/{}", num), "Self-test entry " + num);
+			p.set_name(fmt::format("ata_smart_self_test_log/entry/{}", num), "Self-test entry " + num);
 			p.reported_value = hz::string_trim_copy(line);
 
 			AtaStorageSelftestEntry sse;
diff -Naur a/src/applib/storage_detector_other.cpp b/src/applib/storage_detector_other.cpp
--- a/src/applib/storage_detector_other.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/storage_detector_other.cpp	2024-11-12 03:35:05.623105888 +0100
@@ -14,6 +14,7 @@
 #include <glibmm.h>
 #include <algorithm>  // std::sort
 #include <cerrno>
+#include <fmt/format.h>
 
 #if defined CONFIG_KERNEL_OPENBSD || defined CONFIG_KERNEL_NETBSD
 	#include <util.h>  // getrawpartition()
@@ -203,7 +204,7 @@
 		debug_out_error("app", DBG_FUNC_MSG << "Cannot list device directory entries.\n");
 		std::string message = ec.message();
 		return hz::Unexpected(StorageDetectorError::DevOpenError,
-				std::vformat(_("Cannot list device directory entries: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Cannot list device directory entries: {}"), fmt::make_format_args(message)));
 	}
 
 
diff -Naur a/src/applib/storage_device.cpp b/src/applib/storage_device.cpp
--- a/src/applib/storage_device.cpp	2024-11-07 10:09:59.000000000 +0100
+++ b/src/applib/storage_device.cpp	2024-11-12 03:07:27.016111680 +0100
@@ -14,7 +14,7 @@
 #include <glibmm.h>
 #include <cctype>
 #include <cstdint>
-#include <format>
+#include <fmt/format.h>
 #include <memory>
 #include <unordered_map>
 #include <utility>
@@ -164,7 +164,7 @@
 	if (!parse_status) {
 		std::string message = parse_status.error().message();
 		return hz::Unexpected(StorageDeviceError::ParseError,
-				std::vformat(_("Cannot parse smartctl output: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Cannot parse smartctl output: {}"), fmt::make_format_args(message)));
 	}
 
 	// See if we can narrow down the drive type from what was detected
@@ -412,7 +412,7 @@
 
 	std::string message = parse_status.error().message();
 	return hz::Unexpected(StorageDeviceError::ParseError,
-			std::vformat(_("Cannot parse smartctl output: {}"), std::make_format_args(message)));
+			fmt::vformat(_("Cannot parse smartctl output: {}"), fmt::make_format_args(message)));
 }
 
 
@@ -437,7 +437,7 @@
 	if (!basic_parse_status) {
 		std::string message = basic_parse_status.error().message();
 		return hz::Unexpected(StorageDeviceError::ParseError,
-				std::vformat(_("Cannot parse smartctl output: {}"), std::make_format_args(message)));
+				fmt::vformat(_("Cannot parse smartctl output: {}"), fmt::make_format_args(message)));
 	}
 
 	auto basic_property_repo = basic_parser->get_property_repository();
